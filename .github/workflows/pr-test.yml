name: Pull Request Tests

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          check-latest: true

      - name: Build
        run: go build -v ./...

      - name: Test with coverage
        run: |
          go test -v -coverprofile=coverage.out -json ./... > test-report.json
          echo "::group::Test Summary"
          go tool cover -func=coverage.out
          echo "::endgroup::"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-report.json
          retention-days: 7
          if-no-files-found: error

      - name: Generate HTML coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Generate Markdown summary
        run: |
          # Basic summary header
          echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Coverage summary
          echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Get coverage data
          go tool cover -func=coverage.out > coverage_summary.txt

          # Add coverage data as code block
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat coverage_summary.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Extract total coverage
          TOTAL_LINE=$(grep "total:" coverage_summary.txt || echo "total: (statements) 0.0%")
          COVERAGE=$(echo "$TOTAL_LINE" | awk '{print $3}')
          echo "**Total Coverage: $COVERAGE**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Test results summary
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count test results
          PASSED=$(grep -c '"Action":"pass"' test-report.json || echo 0)
          FAILED=$(grep -c '"Action":"fail"' test-report.json || echo 0)
          SKIPPED=$(grep -c '"Action":"skip"' test-report.json || echo 0)
          TOTAL=$((PASSED + FAILED + SKIPPED))

          # Create test results table
          echo "| Status | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| ✅ Passed | $PASSED |" >> $GITHUB_STEP_SUMMARY
          echo "| ❌ Failed | $FAILED |" >> $GITHUB_STEP_SUMMARY
          echo "| ⏭️ Skipped | $SKIPPED |" >> $GITHUB_STEP_SUMMARY
          echo "| **Total** | **$TOTAL** |" >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html
          retention-days: 7
          if-no-files-found: error
